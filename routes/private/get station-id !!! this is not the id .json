 //get station-id  !!! this is not the id in sql table , this is a unique id extracted from the URL !!!
 const getstationID = app.get("/api/v1/station/:stationId",(req) => {
    return req.params.id;
  });


  //get station 
  const getStation = async function(req){
    const station = await db
    .select("*")
    .from("se_project.stations")
    .where("id", getstationID)

    return station;

  };

  //manage stations - update station
  app.put("/api/v1/station/:stationId" , async function(req){
    const user = await getUser(req);
    const stationN = req.body.stationN
    const stationID = req.params.stationId

    try{
      const updatedStation = await db("se_project.stations").where("id",getstationID).update("stationName" , stationN )
      return res.status(200).json(updatedStation)
    } catch(e){
      return res.status(400).send("cannot update this station")
    }

  });


  //request refunds 
  app.post("/api/v1/refund/:ticketId" , async  (req , res)=>{
    const userId = await getUSer(req).userId;
   // const refundAmount =
    const ticketId = req.params.ticketId;
    const refundRequest = {
      //status,
      userId,
      refundAmount,
      ticketId,
    } 
    try {
      const addRefundRequest = await db ("se_project.refund_requests").insert(addRefundRequest).returning("*");
      return res.status(200).json(addRefundRequest);  
    } catch (e) {
      console.log(e.message);
      return res.status(400).send("Invalid Request");
      
    }
  });

  //request to be a senior
  app.post("/api/v1/senior/request" , async (req , res)=>{
    const nationalID = req.body.nationalID
    const user = await getUser(req);
    const userId = user.userId;
  
    //approving the senior request by checking the age
  
      //create a new senior request with the data
    
      //adding the senior request to the database senior requests table
      try {
        const seniorRequest = {
          status:"pending",
          userId,
          nationalID
        }
        const addSeniorRequest = await db("se_project.senior_requests").insert(seniorRequest).returning("*");
        return res.status(200).json(addSeniorRequest);
      } catch (e) {
        console.log(e.message);
        return res.status(400).send("Invalid Request");
      }
      
    //}
    // else {
    //   return res.status(200).send("You are not eligible to submit a senior request");
    });
  
  //create stations
  app.post("/api/v1/station", async function (req, res) {
    try{
    const stationName = req.body.stationName
    const stationType = "normal"
    const stationPosition= null
    const stationStatus="new created"
    
    const stationExists = await db
      .select("*")
      .from("se_project.stations")
      .where("stationName", stationName)
      .first();
    if (!isEmpty(stationExists)) {
      return res.status(400).send("Station already exists");
    };
    const newStation = {
      stationName,
      stationType,
      stationPosition,
      stationStatus,
    };
    const insertedStation = await db("se_project.stations").insert(newStation).returning("*");
  
    return res.status(200).json(insertedStation);
  } catch (e) {
    console.log(e.message);
    return res.status(400).send("Could not create station");
  }
  });
  
    
  //delete station 
  app.delete("/api/v1/station/:stationId", async function (req, res) {
  
    StationToBeDeletedID = req.params.stationId;
      
    // In Node.js
    const { uploadR } = require('lisaMekhael/SoftwareProject2/connectors/uploadStations.js');
    let allRoutes =[]  //should store routes
    allRoutes= await db("se_project.routes").select("*");
    let savedRoutes = []  //should store id (number)
  
    for (let i = 0; i < allRoutes.length; i++) {
      if(allRoutes[i].fromStationid==3){
        savedRoutes.push(allRoutes.tostationid);
      }
    }
  
    for(let i = 0; i < allRoutes.length; i++){
  
      if(allRoutes[i].tostationid==StationToBeDeletedID){
        for(let x =0 ; x < savedRoutes.length ; x++){  //x=0
  
          if(allRoutes[i].fromStationid==savedRoutes[x]){ //==2?
            print("to & from same station")
  
          }else{
            let routename = "hi" + allRoutes[i].fromStationid + savedRoutes[x]
             const newRoute={
              routename,
              fromStationid : allRoutes[i].fromStationid , 
              tostationid : savedRoutes[x]
             }
            try{
              await db("se_project.routes").insert(newRoute);
            } catch (e) {
              console.log(e.message);
              return res.status(400).send("Could not add new route");
            }
          }
        } 
      }
    }
    //??I AM ASUMMING THAT WHEN I DELETE IN STATION THAT AUTOMATICALLY
    // ROUTE WITH THIS STATION ID WILL GET DELETED FROM ROUTE AND STATION ROUTE
    //SHOULD I BE CONCERENED WITH STATION ROUTE???
    try {
      await db("se_project.stations").where("id" ,StationToBeDeletedID).del();
  
  
    } catch (e) {
      console.log(e.message);
      return res.status(400).send("could not delete station");
      
    }
    
  
  }); 
  
  
  //create route
  
  app.post("/api/v1/route" , async function (req , res){
  
  });
  
  
  //get subcriptions 
  app.get("/api/v1/zones", async function (req, res) {
    try {
      const zones= await db.select('*').from("se_project.zones")
        
      return res.status(200).json(zones);
    } catch (e) {
      console.log(e.message);
      return res.status(400).send("there is no zones to display");
    }
  });
  }
  
  //pay subscription   //lazem aroun le ticket w adeha subid???
  app.post("/api/v1/payment/subscription", async function(req, res){
    const user = await getUser(req);
    const userID = user.id;
   
  const newSubscription = {
    subType: req.body.subType,
    zoneid : req.body.zoneID,
    userid : userID
  };  
  
  
  const transaction = {
    payedAmount: req.body.payedAmount,
    userid : userID,
    purchasedId : req.body.purchasedId
  }
  
  
  const creditcardnumber= req.body.creditcardnumber;
  const holderName= req.body.holderName;
  
  try {
    await db("se_project.transactions").insert(transaction).returning("*");
    return res.status(200).json(transaction);
  } catch (e) {
    console.log(e.message);
    return res.status(400).send("transaction failed");
  }
  
  
  if(subType=="annual"){
    newSubscription.nooftickets = 100;
  
  
  }else if(subType=="quartely"){
  
    newSubscription.nooftickets = 50;
  
  }else if(subType=="monthly"){
    newSubscription.nooftickets = 10;
  
  };
  try {
    await db("se_project.subsription").insert(newSubscription).returning("*");
    return res.status(200).json(newSubscription);
  } catch (e) {
    console.log(e.message);
    return res.status(400).send("transaction failed");
  }
  
  });
  
  
  //pay ticket online ??? do i need to check if ticket subid is null ???
  app.post("/api/v1/payment/ticket", async function( req, res){
    const user = await getUser(req);
    const userID = user.id;
   const newticket ={ 
    origin:req.body.origin,
    destination:req.body.destination,
    userid = userID,
    subID = null,
    tripDate:req.body.tripDate 
   }
   const creditCardNumber = req.body.creditCardNumber;
   const holderName = req.body.holderName;
  
   const transaction = {
    payedAmount: req.body.payedAmount,
    userid : userID,
    purchasedId : req.body.purchasedId
   }
  
   try {
     const user = await db("se_project.tickets").insert(newticket).returning("*");
     return res.status(200).json(tickets);
   } catch (e) {
     console.log(e.message);
     return res.status(400).send("cannot purchase ticket");
   }
  
   try {
    const user = await db("se_project.transactions").insert(transaction).returning("*");
    return res.status(200).json(transaction);
  } catch (e) {
    console.log(e.message);
    return res.status(400).send("cannot make transaction");
  }
   
  });
  
  //check price
  app.post("/api/v1/tickets/price/:originId & :destinationId", async function(req , res){
  
  });
  
  
  //pay for ticket by sub  , //???subid in ticket is automatically generated???
  // subId:integer,
  // origin:string,
  // destination:string.
  // tripDate: dateTime
  
  app.post("/api/v1/tickets/purchase/subscription", async function (req, res){
  
    const subId = req.body.subId
    const user = await getUser(req);
    const userID = user.id;
    const origin = req.body.origin;
    const originId = await db("se_project.stations").where("stationname",origin).select("id");
    const destination = req.body.destination;
    const destination = await db("se_project.stations").where("stationname",destination).select("id");
  
    try {
      
      const ticketNo = await db("se_project.subsription").where("id" , subId).where("userid" ,userID ).returning("nooftickets")
      if(ticketNo<=0){
        return res.status(400).send("tickets ended for this subscription");
        await db("se_project.subscription").where("id", subId).where("userid", userID).del();
        return res.status(200).send("subscription deleted from database");
      }else{
        await db("se_project.subscription").where("id", subId).where("userid", userID).update("nooftickets" , ticketNo-1)
        return res.status(200).send("subscription tickets decreased by 1");
      }
  
      const newTicket={
        origin : req.body.origin,
        destination : req.body.destination,
        userId : userID,
        subId : subId,
        tripDate : req.body.tripDate
      }
  
      try{
        await db("se_project.tickets").insert(newTicket)
        return res.status(200).json(newTicket)
  
      }catch(e){
        console.log(e.message);
        return res.status(400).send("cannot add new ticket in table ticket");
  
      }
      const newRide = {
        status: "upcoming",
        origin : origin,
        destination : destination,
        userid : userID,
        //ticketId  ??? HOW TO GET TICKET ID ???
        tripDate : req.body.tripDate
  
      }
  
      try{
        await db("se_project.rides").insert(newRide)
  
      }catch(e){
        console.log(e.message);
        return res.status(400).send("cannot add new ride in table rides");
      }
  
      //?? there is no transaction for paid by sub??
      // const newTransaction={
  
  
      // }
  
  
  
    } catch (e) {
      console.log(e.message);
      return res.status(400).send("invalid subscription ID / ??no tickets left??");
    }
  
    const ticketbysub= {
      subId:req.body.subId, 
      origin:req.body.origin,
      destination:req.body.destination,
      tripDate: req.body.tripDate
    }
    
    try {
      const user = await db("se_project.tickets").insert(ticketbysub).returning("*");
    
      return res.status(200).json(tickets);
    } catch (e) {
      console.log(e.message);
      return res.status(400).send("cannot purchase ticket");
    }
    
    
  
   
  
  });
  
  
  //delete stations old
  app.put("/api/v1/station/:stationId ", async function(req){
    const stationId = req.params.stationId;
    const stationType = await db("se_project.stations").select("stationtype").from(se_project.stations).where("id", stationId)
    if (stationType == "start"){
      await db("se_project.stations").update("stationposition", "start").where("id", stationId+1)
      await db("se_project.stations").where("id", stationId).del();
    } 
    else if (stationType == "end"){
      await db("se_project.stations").update("stationposition", "end").where("id", stationId-1)
      await db("se_project.stations").where("id", stationId).del();
    } 
    else if (stationType == "middle"){
      await db("se_project.stations").delete().where("id", stationId)
      
    }
  });